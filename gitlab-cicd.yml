stages:
  - validate
  - build
  - deploy

variables:
  IMAGE_NAME: "flask-app"
  PROJECT_ID: "<GCP_PROJECT_ID>"
  REGION: "us-central1"
  REPO_NAME: "flask-artifact-repo"
  CLUSTER_NAME: "flask-gke-cluster"

# Stage 1: VALIDATION
validate:
  stage: validate
  image: hashicorp/terraform:light
  script:
    - terraform -chdir=terraform init
    - terraform -chdir=terraform validate

linter:
  stage: validate
  image: alpine
  script:
    - apk add --no-cache yamllint hadolint
    - yamllint kubernetes/
    - hadolint codebase-main/Dockerfile

# Stage 2: BUILD AND PUSH
build-and-push:
  stage: build
  image: gcr.io/cloud-builders/docker
  script:
    - echo $GCP_SERVICE_KEY | base64 -d > key.json
    - gcloud auth activate-service-account --key-file=key.json
    - gcloud config set project $PROJECT_ID
    - gcloud auth configure-docker $REGION-docker.pkg.dev
    - docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$IMAGE_NAME:latest ./codebase-main
    - docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$IMAGE_NAME:latest

# Stage 3: DEPLOY
deploy-to-gke:
  stage: deploy
  image: google/cloud-sdk:latest
  script:
  #Se puede realizar por archivo Secret o por variables locales.
    - echo $GCP_SERVICE_KEY | base64 -d > key.json
    #Se deben verificar los permisos de conexion.
    - gcloud auth activate-service-account --key-file=key.json
    #identificador de proyecto.
    - gcloud config set project $PROJECT_ID
    #Recordar nombre de culter y region.
    - gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION
    #URL de la imagen almacenada.
    - sed -i "s|<REPLACE_WITH_IMAGE_URL>|$REGION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$IMAGE_NAME:latest|" kubernetes/deployment.yaml
    
    - kubectl apply -f kubernetes/
